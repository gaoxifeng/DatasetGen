#ifndef BLOCKED_SOLVER_H
#define BLOCKED_SOLVER_H

#include "KrylovMatrix.h"
#include "LinearSolver.h"

PRJ_BEGIN

//the krylov matrix
template <int N,typename T,typename KERNEL_TYPE=Kernel<T> >
struct BlockedKrylovMatrix : public KrylovMatrix<T,KERNEL_TYPE> {
public:
  typedef typename KERNEL_TYPE::Vec Vec;
  BlockedKrylovMatrix(){}
  BlockedKrylovMatrix(boost::shared_ptr<KrylovMatrix<T,KERNEL_TYPE> > inner):_matrix(inner){}
  BlockedKrylovMatrix(const FixedSparseMatrix<T,KERNEL_TYPE>& smat):_matrix(new DefaultKrylovMatrix<T,KERNEL_TYPE>(mat)){}
  virtual void multiply(const Vec& b,Vec& out) const{
    Vec bBLK,outBLK;
    bBLK.resize(_matrix->n());
    outBLK.resize(_matrix->n());
    for(int d=0;d<N;d++)
    {
      bBLK=Eigen::Map<const Vec,0,Eigen::InnerStride<N> >(b.data()+d,bBLK.size());
      _matrix->multiply(bBLK,outBLK);
      Eigen::Map<Vec,0,Eigen::InnerStride<N> >(out.data()+d,bBLK.size())=outBLK;
    }
  }
  virtual sizeType n() const{return _matrix->n()*N;}
  boost::shared_ptr<KrylovMatrix<T,KERNEL_TYPE> > _matrix;
};

//the solver
template <typename T,typename KERNEL_TYPE>
struct BlockedSolver : public Solver<T,KERNEL_TYPE> {
public:
    typedef typename KERNEL_TYPE::Vec Vec;
    virtual void setMatrix(const FixedSparseMatrix<T,KERNEL_TYPE>& matrix,bool syncPrecon) =0;
    virtual void setKrylovMatrix(boost::shared_ptr<KrylovMatrix<T,KERNEL_TYPE> > matrix) {
        ASSERT_MSG(false,"Not Implemented!");
    }
    virtual void setSolverParameters(T toleranceFactor,sizeType maxIterations) {}
    virtual void resize(const sizeType& n) {}
    virtual Solver<T,KERNEL_TYPE>* getPre() {
        return NULL;
    }
    virtual const Solver<T,KERNEL_TYPE>* getPre() const {
        return NULL;
    }
    virtual SOLVER_RESULT solve(const Vec& rhs,Vec& result) =0;
    SOLVER_RESULT solveMatrix(const SparseMatrix<T,KERNEL_TYPE>& matrix,const Vec& rhs,Vec& result,bool syncPrecon) {
        setMatrix(matrix,syncPrecon);
        return solve(rhs,result);
    }
    SOLVER_RESULT solveMatrix(const FixedSparseMatrix<T,KERNEL_TYPE>& matrix,const Vec& rhs,Vec& result,bool syncPrecon) {
        setMatrix(matrix,syncPrecon);
        return solve(rhs,result);
    }
    virtual sizeType getIterationsCount() const {
        return _iterationsOut;
    }
    virtual T getResidual() const {
        return _residualOut;
    }
    virtual void setCallback(typename boost::shared_ptr<Callback<T,KERNEL_TYPE> > cb) {
        _cb=cb;
    }
    boost::shared_ptr<Solver<T,KERNEL_TYPE> > _sol;
};

PRJ_END

#endif
